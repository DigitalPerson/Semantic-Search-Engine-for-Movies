#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IRHomework
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MovieTrack1")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertLang(Lang instance);
    partial void UpdateLang(Lang instance);
    partial void DeleteLang(Lang instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMovie_Actor(Movie_Actor instance);
    partial void UpdateMovie_Actor(Movie_Actor instance);
    partial void DeleteMovie_Actor(Movie_Actor instance);
    partial void InsertMovie_Genre(Movie_Genre instance);
    partial void UpdateMovie_Genre(Movie_Genre instance);
    partial void DeleteMovie_Genre(Movie_Genre instance);
    partial void InsertMovie_Lang(Movie_Lang instance);
    partial void UpdateMovie_Lang(Movie_Lang instance);
    partial void DeleteMovie_Lang(Movie_Lang instance);
    partial void InsertSubtitle(Subtitle instance);
    partial void UpdateSubtitle(Subtitle instance);
    partial void DeleteSubtitle(Subtitle instance);
    partial void InsertDomain(Domain instance);
    partial void UpdateDomain(Domain instance);
    partial void DeleteDomain(Domain instance);
    partial void InsertDbPediaType(DbPediaType instance);
    partial void UpdateDbPediaType(DbPediaType instance);
    partial void DeleteDbPediaType(DbPediaType instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::IRHomework.Properties.Settings.Default.MovieTrack1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Lang> Langs
		{
			get
			{
				return this.GetTable<Lang>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Movie_Actor> Movie_Actors
		{
			get
			{
				return this.GetTable<Movie_Actor>();
			}
		}
		
		public System.Data.Linq.Table<Movie_Genre> Movie_Genres
		{
			get
			{
				return this.GetTable<Movie_Genre>();
			}
		}
		
		public System.Data.Linq.Table<Movie_Lang> Movie_Langs
		{
			get
			{
				return this.GetTable<Movie_Lang>();
			}
		}
		
		public System.Data.Linq.Table<Subtitle> Subtitles
		{
			get
			{
				return this.GetTable<Subtitle>();
			}
		}
		
		public System.Data.Linq.Table<Domain> Domains
		{
			get
			{
				return this.GetTable<Domain>();
			}
		}
		
		public System.Data.Linq.Table<DbPediaType> DbPediaTypes
		{
			get
			{
				return this.GetTable<DbPediaType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _actorID;
		
		private string _name;
		
		private EntitySet<Movie_Actor> _Movie_Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnactorIDChanging(int value);
    partial void OnactorIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Actor()
		{
			this._Movie_Actors = new EntitySet<Movie_Actor>(new Action<Movie_Actor>(this.attach_Movie_Actors), new Action<Movie_Actor>(this.detach_Movie_Actors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int actorID
		{
			get
			{
				return this._actorID;
			}
			set
			{
				if ((this._actorID != value))
				{
					this.OnactorIDChanging(value);
					this.SendPropertyChanging();
					this._actorID = value;
					this.SendPropertyChanged("actorID");
					this.OnactorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_Movie_Actor", Storage="_Movie_Actors", ThisKey="actorID", OtherKey="actorID")]
		public EntitySet<Movie_Actor> Movie_Actors
		{
			get
			{
				return this._Movie_Actors;
			}
			set
			{
				this._Movie_Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_Actors(Movie_Actor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_Movie_Actors(Movie_Actor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _genreID;
		
		private string _name;
		
		private EntitySet<Movie_Genre> _Movie_Genres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngenreIDChanging(int value);
    partial void OngenreIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Genre()
		{
			this._Movie_Genres = new EntitySet<Movie_Genre>(new Action<Movie_Genre>(this.attach_Movie_Genres), new Action<Movie_Genre>(this.detach_Movie_Genres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int genreID
		{
			get
			{
				return this._genreID;
			}
			set
			{
				if ((this._genreID != value))
				{
					this.OngenreIDChanging(value);
					this.SendPropertyChanging();
					this._genreID = value;
					this.SendPropertyChanged("genreID");
					this.OngenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Movie_Genre", Storage="_Movie_Genres", ThisKey="genreID", OtherKey="genreID")]
		public EntitySet<Movie_Genre> Movie_Genres
		{
			get
			{
				return this._Movie_Genres;
			}
			set
			{
				this._Movie_Genres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_Genres(Movie_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Movie_Genres(Movie_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lang")]
	public partial class Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _langID;
		
		private string _name;
		
		private EntitySet<Movie_Lang> _Movie_Langs;
		
		private EntitySet<Subtitle> _Subtitles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlangIDChanging(int value);
    partial void OnlangIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Lang()
		{
			this._Movie_Langs = new EntitySet<Movie_Lang>(new Action<Movie_Lang>(this.attach_Movie_Langs), new Action<Movie_Lang>(this.detach_Movie_Langs));
			this._Subtitles = new EntitySet<Subtitle>(new Action<Subtitle>(this.attach_Subtitles), new Action<Subtitle>(this.detach_Subtitles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_langID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int langID
		{
			get
			{
				return this._langID;
			}
			set
			{
				if ((this._langID != value))
				{
					this.OnlangIDChanging(value);
					this.SendPropertyChanging();
					this._langID = value;
					this.SendPropertyChanged("langID");
					this.OnlangIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lang_Movie_Lang", Storage="_Movie_Langs", ThisKey="langID", OtherKey="langID")]
		public EntitySet<Movie_Lang> Movie_Langs
		{
			get
			{
				return this._Movie_Langs;
			}
			set
			{
				this._Movie_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lang_Subtitle", Storage="_Subtitles", ThisKey="langID", OtherKey="langID")]
		public EntitySet<Subtitle> Subtitles
		{
			get
			{
				return this._Subtitles;
			}
			set
			{
				this._Subtitles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_Langs(Movie_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Lang = this;
		}
		
		private void detach_Movie_Langs(Movie_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Lang = null;
		}
		
		private void attach_Subtitles(Subtitle entity)
		{
			this.SendPropertyChanging();
			entity.Lang = this;
		}
		
		private void detach_Subtitles(Subtitle entity)
		{
			this.SendPropertyChanging();
			entity.Lang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movieID;
		
		private string _imdb_id;
		
		private string _name;
		
		private string _year;
		
		private string _thumbnail;
		
		private string _video;
		
		private EntitySet<Movie_Actor> _Movie_Actors;
		
		private EntitySet<Movie_Genre> _Movie_Genres;
		
		private EntitySet<Movie_Lang> _Movie_Langs;
		
		private EntitySet<Subtitle> _Subtitles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void Onimdb_idChanging(string value);
    partial void Onimdb_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnyearChanging(string value);
    partial void OnyearChanged();
    partial void OnthumbnailChanging(string value);
    partial void OnthumbnailChanged();
    partial void OnvideoChanging(string value);
    partial void OnvideoChanged();
    #endregion
		
		public Movie()
		{
			this._Movie_Actors = new EntitySet<Movie_Actor>(new Action<Movie_Actor>(this.attach_Movie_Actors), new Action<Movie_Actor>(this.detach_Movie_Actors));
			this._Movie_Genres = new EntitySet<Movie_Genre>(new Action<Movie_Genre>(this.attach_Movie_Genres), new Action<Movie_Genre>(this.detach_Movie_Genres));
			this._Movie_Langs = new EntitySet<Movie_Lang>(new Action<Movie_Lang>(this.attach_Movie_Langs), new Action<Movie_Lang>(this.detach_Movie_Langs));
			this._Subtitles = new EntitySet<Subtitle>(new Action<Subtitle>(this.attach_Subtitles), new Action<Subtitle>(this.detach_Subtitles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imdb_id", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string imdb_id
		{
			get
			{
				return this._imdb_id;
			}
			set
			{
				if ((this._imdb_id != value))
				{
					this.Onimdb_idChanging(value);
					this.SendPropertyChanging();
					this._imdb_id = value;
					this.SendPropertyChanged("imdb_id");
					this.Onimdb_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="VarChar(4)")]
		public string year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thumbnail", DbType="VarChar(200)")]
		public string thumbnail
		{
			get
			{
				return this._thumbnail;
			}
			set
			{
				if ((this._thumbnail != value))
				{
					this.OnthumbnailChanging(value);
					this.SendPropertyChanging();
					this._thumbnail = value;
					this.SendPropertyChanged("thumbnail");
					this.OnthumbnailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_video", DbType="VarChar(200)")]
		public string video
		{
			get
			{
				return this._video;
			}
			set
			{
				if ((this._video != value))
				{
					this.OnvideoChanging(value);
					this.SendPropertyChanging();
					this._video = value;
					this.SendPropertyChanged("video");
					this.OnvideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Actor", Storage="_Movie_Actors", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<Movie_Actor> Movie_Actors
		{
			get
			{
				return this._Movie_Actors;
			}
			set
			{
				this._Movie_Actors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Genre", Storage="_Movie_Genres", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<Movie_Genre> Movie_Genres
		{
			get
			{
				return this._Movie_Genres;
			}
			set
			{
				this._Movie_Genres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Lang", Storage="_Movie_Langs", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<Movie_Lang> Movie_Langs
		{
			get
			{
				return this._Movie_Langs;
			}
			set
			{
				this._Movie_Langs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Subtitle", Storage="_Subtitles", ThisKey="movieID", OtherKey="movieID")]
		public EntitySet<Subtitle> Subtitles
		{
			get
			{
				return this._Subtitles;
			}
			set
			{
				this._Subtitles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_Actors(Movie_Actor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Movie_Actors(Movie_Actor entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Movie_Genres(Movie_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Movie_Genres(Movie_Genre entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Movie_Langs(Movie_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Movie_Langs(Movie_Lang entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Subtitles(Subtitle entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Subtitles(Subtitle entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie_Actor")]
	public partial class Movie_Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _movieID;
		
		private int _actorID;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OnactorIDChanging(int value);
    partial void OnactorIDChanged();
    #endregion
		
		public Movie_Actor()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL")]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actorID", DbType="Int NOT NULL")]
		public int actorID
		{
			get
			{
				return this._actorID;
			}
			set
			{
				if ((this._actorID != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnactorIDChanging(value);
					this.SendPropertyChanging();
					this._actorID = value;
					this.SendPropertyChanged("actorID");
					this.OnactorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_Movie_Actor", Storage="_Actor", ThisKey="actorID", OtherKey="actorID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.Movie_Actors.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.Movie_Actors.Add(this);
						this._actorID = value.actorID;
					}
					else
					{
						this._actorID = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Actor", Storage="_Movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Movie_Actors.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Movie_Actors.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie_Genre")]
	public partial class Movie_Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _movieID;
		
		private int _genreID;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OngenreIDChanging(int value);
    partial void OngenreIDChanged();
    #endregion
		
		public Movie_Genre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL")]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genreID", DbType="Int NOT NULL")]
		public int genreID
		{
			get
			{
				return this._genreID;
			}
			set
			{
				if ((this._genreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenreIDChanging(value);
					this.SendPropertyChanging();
					this._genreID = value;
					this.SendPropertyChanged("genreID");
					this.OngenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Movie_Genre", Storage="_Genre", ThisKey="genreID", OtherKey="genreID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Movie_Genres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Movie_Genres.Add(this);
						this._genreID = value.genreID;
					}
					else
					{
						this._genreID = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Genre", Storage="_Movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Movie_Genres.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Movie_Genres.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie_Lang")]
	public partial class Movie_Lang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _movieID;
		
		private int _langID;
		
		private EntityRef<Lang> _Lang;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OnlangIDChanging(int value);
    partial void OnlangIDChanged();
    #endregion
		
		public Movie_Lang()
		{
			this._Lang = default(EntityRef<Lang>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL")]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_langID", DbType="Int NOT NULL")]
		public int langID
		{
			get
			{
				return this._langID;
			}
			set
			{
				if ((this._langID != value))
				{
					if (this._Lang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlangIDChanging(value);
					this.SendPropertyChanging();
					this._langID = value;
					this.SendPropertyChanged("langID");
					this.OnlangIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lang_Movie_Lang", Storage="_Lang", ThisKey="langID", OtherKey="langID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lang Lang
		{
			get
			{
				return this._Lang.Entity;
			}
			set
			{
				Lang previousValue = this._Lang.Entity;
				if (((previousValue != value) 
							|| (this._Lang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lang.Entity = null;
						previousValue.Movie_Langs.Remove(this);
					}
					this._Lang.Entity = value;
					if ((value != null))
					{
						value.Movie_Langs.Add(this);
						this._langID = value.langID;
					}
					else
					{
						this._langID = default(int);
					}
					this.SendPropertyChanged("Lang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_Lang", Storage="_Movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Movie_Langs.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Movie_Langs.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subtitle")]
	public partial class Subtitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subtitleID;
		
		private int _status;
		
		private int _movieID;
		
		private int _langID;
		
		private EntityRef<Lang> _Lang;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubtitleIDChanging(int value);
    partial void OnsubtitleIDChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OnmovieIDChanging(int value);
    partial void OnmovieIDChanged();
    partial void OnlangIDChanging(int value);
    partial void OnlangIDChanged();
    #endregion
		
		public Subtitle()
		{
			this._Lang = default(EntityRef<Lang>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subtitleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subtitleID
		{
			get
			{
				return this._subtitleID;
			}
			set
			{
				if ((this._subtitleID != value))
				{
					this.OnsubtitleIDChanging(value);
					this.SendPropertyChanging();
					this._subtitleID = value;
					this.SendPropertyChanged("subtitleID");
					this.OnsubtitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movieID", DbType="Int NOT NULL")]
		public int movieID
		{
			get
			{
				return this._movieID;
			}
			set
			{
				if ((this._movieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmovieIDChanging(value);
					this.SendPropertyChanging();
					this._movieID = value;
					this.SendPropertyChanged("movieID");
					this.OnmovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_langID", DbType="Int NOT NULL")]
		public int langID
		{
			get
			{
				return this._langID;
			}
			set
			{
				if ((this._langID != value))
				{
					if (this._Lang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlangIDChanging(value);
					this.SendPropertyChanging();
					this._langID = value;
					this.SendPropertyChanged("langID");
					this.OnlangIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lang_Subtitle", Storage="_Lang", ThisKey="langID", OtherKey="langID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lang Lang
		{
			get
			{
				return this._Lang.Entity;
			}
			set
			{
				Lang previousValue = this._Lang.Entity;
				if (((previousValue != value) 
							|| (this._Lang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lang.Entity = null;
						previousValue.Subtitles.Remove(this);
					}
					this._Lang.Entity = value;
					if ((value != null))
					{
						value.Subtitles.Add(this);
						this._langID = value.langID;
					}
					else
					{
						this._langID = default(int);
					}
					this.SendPropertyChanged("Lang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Subtitle", Storage="_Movie", ThisKey="movieID", OtherKey="movieID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Subtitles.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Subtitles.Add(this);
						this._movieID = value.movieID;
					}
					else
					{
						this._movieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domain")]
	public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _frequency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfrequencyChanging(System.Nullable<int> value);
    partial void OnfrequencyChanged();
    #endregion
		
		public Domain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frequency", DbType="Int")]
		public System.Nullable<int> frequency
		{
			get
			{
				return this._frequency;
			}
			set
			{
				if ((this._frequency != value))
				{
					this.OnfrequencyChanging(value);
					this.SendPropertyChanging();
					this._frequency = value;
					this.SendPropertyChanged("frequency");
					this.OnfrequencyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbPediaType")]
	public partial class DbPediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public DbPediaType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
